
import base64
import random
import aiohttp
import discord
from discord.ext import commands
from log import *
from typing import *
from config import *
import api
import utils
from bot import MLBot
from io import BytesIO


async def check_ai(bot: MLBot, message: discord.Message):
    # ml ai
    message_length_pass = len(message.content) < 512 and len(message.content) > 0

    # checking for reply
    try:
        actual_reply_to = None if not message.reference else \
            message.reference.cached_message if message.reference.cached_message else \
            (await message.channel.fetch_message(message.reference.message_id))
        
        if actual_reply_to and len(utils.discord_message_to_text(actual_reply_to)) == 0 \
            and len(actual_reply_to.attachments) == 0:
                reply_to = None
        else:
            reply_to = actual_reply_to
    except Exception as e:
        reply_to = None
        pass

    # checking if an image is attached
    url = []
    if reply_to:
        for attachment in reply_to.attachments:
            if attachment.content_type.startswith('image'):
                url.append(attachment.proxy_url)
        reply_images = len(url)
    else:
        reply_images = 0
    for attachment in message.attachments:
        if attachment.content_type.startswith('image'):
            url.append(attachment.proxy_url)

    # adding message to history
    if message_length_pass:
        if message.author.id in NERD_USERS:
            bot.mg.ai.add(api.AIMessage('user', '–û—Ç–≤–µ—Ç—å –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω—ã–º –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ–º —Å –∫—É—á–µ–π –º–∞—Ç–æ–≤ —Å–ª–æ–≤ –≤ 20'))
        else:
            bot.mg.ai.add(api.AIMessage('user', utils.discord_message_to_text(message), message.author, url, reply_to, reply_images))

    # dixus
    found_keyword_dixus = any([
        '–¥–∏–∫—Å—É—Å' in message.content.lower(),
        'dixus' in message.content.lower(),
        'diksus' in message.content.lower(),
    ])
    try:
        if found_keyword_dixus:
            if random.random() > 0.2:
                await message.reply(utils.get_dixus_phrase(message.author.name))
            return
    except Exception as e:
        log(f'Failed to get dixus phrase: {e}', level=ERROR)
        return

    # chceking if mlbot is being called for
    found_keyword = any([
        '–º–ª–±–æ—Ç' in message.content.lower(),
        'mlbot' in message.content.lower(),
        '–º–ª –±–æ—Ç' in message.content.lower(),
        '–¥–∂–∞—Ä–≤–∏—Å' in message.content.lower(),
        'jarvis' in message.content.lower(),
    ])
    replied_to = actual_reply_to.author.id == bot.user.id if actual_reply_to else False
    
    # sending ai request
    if (replied_to or found_keyword) and message_length_pass:
        log(f'Received AI prompt from {message.author.id} (msg {message.id}), image {url}')

        # nvm not sending ai request
        if bot.mg.generating:
            log('Already generating response', level=WARNING)
            await message.add_reaction('üü°')
            return

        # sending request
        async with message.channel.typing():
            bot.mg.generating = True
            try:
                history = await bot.mg.ai.get_history()
                response, image = await bot.mg.gen_ai(history)
                assert response or image, "Empty response"
            
            # sending error message
            except Exception as e:
                log(f'Failed to generate response: {e}', level=ERROR)
                bot.mg.generating = False
                await message.reply(random.choice(HANGUP_TEXTS), allowed_mentions=NO_MENTIONS)

                error_text = f'```json\n{e}\n```' if type(e) != AssertionError else '*–ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç*'

                view = to_view([
                    error_text,
                    SEP(spacing=discord.SeparatorSpacing.large),
                    f'{message.jump_url} „Éª {message.id}',
                    f'{message.author.mention} „Éª {message.author.id}'
                ])
                
                await bot.webhook.send(username='–û—à–∏–±–∫–∞ –ò–ò', avatar_url=WARN_IMAGE, view=view, allowed_mentions=NO_MENTIONS)
            
            # sending response
            else:
                bot.mg.generating = False
                bot.mg.ai.add(api.AIMessage('assistant', response))

                file = discord.File(BytesIO(image), 'image.png') if image else None
                await message.reply(response, file=file, allowed_mentions=NO_MENTIONS)



async def setup(bot: MLBot):
    if not bot.features.ai:
        return

    @bot.hybrid_command(
        name='reset-context',
        aliases=['resetcontext','reset_context','—Å–±—Ä–æ—Å_–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞','—Å–±—Ä–æ—Å-–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞','—Å–±—Ä–æ—Å–∫–æ–Ω—Ç–µ–∫—Å—Ç–∞','—Å–±—Ä–æ—Å–∏—Ç—å–∫–æ–Ω—Ç–µ–∫—Å—Ç','—Å–±—Ä–æ—Å–∏—Ç—å-–∫–æ–Ω—Ç–µ–∫—Å—Ç','—Å–±—Ä–æ—Å–∏—Ç—å_–∫–æ–Ω—Ç–µ–∫—Å—Ç'],
        description='–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –ò–ò –¥–∏–∞–ª–æ–≥–∞. –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —Å —Ä–æ–ª—å—é @–∏–º–±–∞.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    async def slash_reset_context(ctx: commands.Context):
        log(f'{ctx.author.id} resetting context')

        # checking for role
        if not ctx.author.get_role(IMBA_ROLE):
            await ctx.reply(view=c_to_view(MISSING_PERMS_EMBED))
            return

        # resetting context
        bot.mg.reset_ai()
        view = to_view('–ö–æ–Ω—Ç–µ–∫—Å—Ç –ò–ò —Å–±—Ä–æ—à–µ–Ω!', DEFAULT_C)
        await ctx.reply(view=view)


    @bot.hybrid_command(
        name='ai',
        aliases=['–∏–∏','–¥–∂–∞—Ä–≤–∏—Å'],
        description='–ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ò–ò (–±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞).'
    )
    @discord.app_commands.user_install()
    @discord.app_commands.guild_install()
    @discord.app_commands.allowed_contexts(guilds=True, private_channels=True)
    @discord.app_commands.describe(
        text='–¢–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.',
        attachment='–ö–∞—Ä—Ç–∏–Ω–∫–∞ –¥–ª—è –ò–ò.',
        ephemeral='–°–∫—Ä—ã—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö –≤ –∫–∞–Ω–∞–ª–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é "–ù–µ—Ç").'
    )
    @commands.cooldown(1, per=5, type=commands.BucketType.user)
    async def slash_ai(
        ctx: commands.Context,
        text: str,
        attachment: discord.Attachment = None,
        ephemeral: Literal['–î–∞, —Å–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–∏—Ö', '–ù–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º'] = '–ù–µ—Ç, –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ–º'
    ):
        log(f'{ctx.author.id} asks AI thru command')

        if ctx.interaction:
            await ctx.interaction.response.defer()
        else:
            await ctx.channel.typing()

        # generating message
        try:
            if attachment:
                content = [
                    {'type': 'text', 'text': text}
                ]
                
                # downloading image
                async with aiohttp.ClientSession() as session:
                    async with session.get(attachment.url) as resp:
                        if resp.status != 200:
                            raise Exception(f"Failed to fetch image: {resp.status}")
                        
                        encoded_image = base64.b64encode(await resp.read()).decode('utf-8')
                        image_url = f"data:{resp.content_type};base64,{encoded_image}"
                        content.append({"type": "image_url", "image_url": {"url": image_url}})
            else:
                content = text

            text, image = await bot.mg.gen_ai([{'role': 'user', 'content': content}])
            
        except Exception as e:
            log(f'Error while generating AI response from {ctx.author.id} (image {attachment}): {e}')
            view = to_view([
                '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏',
                SEP(),
                f'```{e}```'
            ], ERROR_C)
            await ctx.reply(view=view, ephemeral=True)
            return
        
        # empty response
        if not text and not image:
            await ctx.reply(random.choice(HANGUP_TEXTS), ephemeral=True)
            return

        # sending message
        file = discord.File(BytesIO(image), 'image.png') if image else None
        await ctx.reply(text, file=file, ephemeral=ephemeral.startswith('–î'), allowed_mentions=NO_MENTIONS)

