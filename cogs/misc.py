import aiohttp
from discord.ext import commands
import discord
import api
from log import *
from typing import *
from config import *
import utils
import datetime
import os


# setup
async def setup(bot: commands.Bot):

    @bot.hybrid_command(
        name='ping',
        aliases=['–ø–∏–Ω–≥'],
        description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–∏–Ω–≥ –±–æ—Ç–∞.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    async def slash_ping(ctx: commands.Context):
        '''
        Shows bot ping.
        '''
        log(f'{ctx.author.id} requested bot ping')
        ping = round(bot.latency*1000)
        view = to_view([
            '### üèì –ü–æ–Ω–≥!', SEP(), f'**{ping}** –º—Å'
        ])
        await ctx.reply(view=view)


    @bot.hybrid_command(
        name='invites',
        aliases=['invite','–∏–Ω–≤–∞–π—Ç—ã','–∏–Ω–≤–∞–π—Ç–æ–≤','–∏–Ω–≤–∞–π—Ç'],
        description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–Ω–∏–π —Å—Å—ã–ª–∫–∏-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    async def slash_invite(ctx: commands.Context):
        '''
        Shows invite count.
        '''
        log(f'{ctx.author.id} requested invite count')

        invites = 0
        invitelist = await ctx.guild.invites()

        for i in invitelist:
            invites += i.uses
        
        view = to_view(f'# {utils.to_cool_numbers(invites)}')
        await ctx.reply(view=view)


    @bot.hybrid_command(
        name='moonland',
        description='üíú –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ moonland:re'
    )
    @discord.app_commands.allowed_installs(guilds=False, users=True)
    async def slash_invite(ctx: commands.Context):
        log(f'{ctx.author.id} sending invite')

        if ctx.guild and ctx.guild.id == GUILD_ID:
            return

        view = to_view([
            '**moonland bot** - –±–æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ moonland:re.',
            '## https://discord.gg/s3NrXyYjnG'
        ], discord.Color.from_str('#641CBC'))

        await ctx.reply(view=view)


    @bot.hybrid_command(
        name='stats',
        aliases=['—Å—Ç–∞—Ç','—Å—Ç–∞—Ç–∞','—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞','stat','statistics'],
        description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    async def slash_about(ctx: commands.Context, user: discord.User=None):
        '''
        Shows bot info.
        '''
        log(f'{ctx.author.id} requested bot info')

        if user == None:
            user = ctx.author

        if user.bot:
            view = to_view('–≠—Ç–æ –±–æ—Ç –¥–∞. –Ω–µ–∑—è –∞—Ç–∞—Ç–∞', ERROR_C)
            await ctx.reply(view=view)
            return

        botuser: api.User = bot.mg.get_user(user.id)
        finishes = bot.mg.get_lb_finishes(user.id)
        
        view = to_view([
            f'### üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {user.display_name}', SEP(),
            f'### {PLACE1} **{finishes[1]}** „Éª {PLACE2} **{finishes[2]}** „Éª {PLACE3} **{finishes[3]}**',
            f'–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: **{len(botuser.reminders)} / {MAX_REMINDERS}**',
            f'–†–µ–∂–∏–º –ó–≤–µ—Ä—è: {"‚úÖ" if botuser.marked_by_beast else "‚ùå"}',
            f'Likee Bot: {"‚úÖ" if botuser.likee else "‚ùå"}',
        ])
        await ctx.reply(view=view)


    @bot.tree.command(
        name='anon',
        description='–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ #—á–∞—Ç.'
    )
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    @discord.app_commands.describe(text='–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    async def slash_anon(ctx: discord.Interaction, text: str):
        '''
        Sends anonymous message.
        '''
        if not ctx.guild:
            return
        if ctx.guild.id != GUILD_ID:
            return
        
        if ctx.channel.id != CHAT_CHANNEL:
            view = to_view(f'–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–∞–Ω–∞–ª–µ <#{CHAT_CHANNEL}>.', ERROR_C)
            await ctx.response.send_message(view=view, ephemeral=True)
            return

        if 'discord.com/invite/' in text.lower() or 'discord.gg/' in text.lower():
            view = to_view('–ù–µ—Ç –∏–¥–∏ –Ω–∞—Ö—É–π', ERROR_C)
            await ctx.response.send_message(view=view, ephemeral=True)
            return
        
        await ctx.response.defer(ephemeral=True)

        # sending
        session = aiohttp.ClientSession()
        webhook = discord.Webhook.from_url(bot.SERVICE_WEBHOOK, session=session)

        await webhook.send(content=text, username='–ê–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ „Éª /anon', avatar_url=MESSAGE_IMAGE, allowed_mentions=NO_MENTIONS)
        await session.close()

        log(f'{ctx.user.id} sent an anonymous message: {text}')

        # success
        view = to_view('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', DEFAULT_C)
        await ctx.followup.send(view=view)


    @bot.hybrid_command(
        name='about',
        aliases=['info','–æ–±–æ—Ç–µ','–∏–Ω—Ñ–æ','–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'],
        description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    async def slash_about(ctx: commands.Context):
        '''
        Shows bot info.
        '''
        log(f'{ctx.author.id} requested bot info')

        stats = bot.mg.get_all_info()
        verified_count = len(ctx.guild.get_role(VERIFY_ROLE).members)
        
        view = to_view([
            '### :information_source: –û –±–æ—Ç–µ', SEP(),
            '–°–æ–∑–¥–∞—Ç–µ–ª—å: `moontr3` (obviously)',
            '–ö–æ–Ω—Ç—Ä–∏–±—å—é—Ç–æ—Ä—ã: `n0n1m`, `mbutsk`',
            '–ù–∞–ø–∏—Å–∞–Ω –Ω–∞ **Python** –∏ **discord.py**\n-# –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–∞—Ä—Ç–∏–Ω–æ–∫ —á–µ—Ä–µ–∑ **pygame-ce**',
            SEP(),
            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ: **{len(bot.mg.users)}**',
            f'–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: **{ctx.guild.member_count}**',
            f'–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ: **{verified_count}**',
            SEP(),
            f'–í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–ø—ã—Ç–∞: **{stats["xp"]} XP**',
            f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–∫–∏–Ω–æ–≤: **{stats["skins"]}**',
            f'–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —à—Ä–∏—Ñ—Ç–æ–≤: **{stats["fonts"]}**',
            f'–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ Q: **{stats["q"]} Q**',
        ])

        await ctx.reply(view=view)


    # purge command
    @bot.hybrid_command(
        name='purge',
        aliases=['–æ—á–∏—Å—Ç–∏—Ç—å'],
        description='–£–¥–∞–ª—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª–µ.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    @discord.app_commands.describe(
        amount='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—á–∏—Å—Ç–∫–∏',
        member='–§–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞',
        keywords='–§–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–æ–ª—å–∫–æ —Å –Ω—É–∂–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º'
    )
    async def slash_purge(
        ctx: commands.Context, amount:int,
        member:discord.User=None, keywords:str=''
    ):
        '''
        Purges the channel.
        '''
        # checking permissions
        if not ctx.permissions.manage_messages:
            await ctx.reply(view=c_to_view(MISSING_PERMS_EMBED))
            return
        
        # sending loading message
        await ctx.reply(view=c_to_view(LOADING_EMBED))

        # just purge
        if member == None and keywords == '':
            deleted = await ctx.channel.purge(limit=amount)
            text = f'–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ **{len(deleted)}** —Å–æ–æ–±—â–µ–Ω–∏–π!'

        # filter by user
        elif member != None and keywords == '':
            def check(m):
                return m.author.id == member.id
            
            deleted = await ctx.channel.purge(limit=amount, check=check)
            text = f'–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ **{len(deleted)}** —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {member.name}!'

        # filter by keywords
        elif member == None and keywords != '':
            def check(m):
                return keywords in m.content
            
            deleted = await ctx.channel.purge(limit=amount, check=check)
            text = f'–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ **{len(deleted)}** –∏–∑ **{amount}** –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π!'
        
        # both
        else:
            def check(m):
                return (keywords in m.content) and\
                    (m.author.id == member.id)
            
            deleted = await ctx.channel.purge(limit=amount, check=check)
            text = f'–£—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ **{len(deleted)}** —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {member.name}!'

        log(f'{ctx.author.id} purged {len(deleted)}/{amount} messages in {ctx.channel.id}')

        # sending message
        # checking if there even was something deleted
        if len(deleted) == 0:
            view = to_view([
                'üóë –û—á–∏—Å—Ç–∫–∞', SEP(),
                '–ü–æ —Ç–∞–∫–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å.'
            ], ERROR_C)
        else:
            view = to_view([
                'üóë –û—á–∏—Å—Ç–∫–∞', SEP(), text
            ], DEFAULT_C)
        await ctx.response.edit_message(view=view)


    # mute command

    @bot.hybrid_command(
        name='mute',
        aliases=['–º—É—Ç','timeout','—Ç–∞–π–º–∞—É—Ç'],
        description='–ú—É—Ç–∏—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    @discord.app_commands.describe(
        member='–£—á–∞—Å—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –∑–∞–º—É—Ç–∏—Ç—å',
        length='–î–ª–∏–Ω–∞ –º—É—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "10h", "3–¥" –∏ —Ç–∞–∫ –¥–∞–ª–µ–µ',
        reason='–ü—Ä–∏—á–∏–Ω–∞ –º—É—Ç–∞'
    )
    async def slash_mute(
        ctx: commands.Context, member:discord.Member,
        length:str, *, reason:str=None
    ):
        '''
        Mutes the specified user.
        '''
        # checking permissions
        if not ctx.permissions.moderate_members:
            await ctx.reply(view=c_to_view(MISSING_PERMS_EMBED))
            return

        # muting user
        data = utils.seconds_from_string(length)
        # checking input validity
        if data == None:
            await ctx.reply(view=c_to_view(INCORRECT_LENGTH_EMBED), ephemeral=True)
            return
        
        else:
            length = data[0]
            unit_name = data[1]
            unit_length = data[2]

        length = datetime.timedelta(seconds=length)
        
        # timeouting user
        try:
            await member.timeout(length, reason=reason)
            log(f'{ctx.author.id} timeouted user {member.id} for {length}')
        
        except Exception as e:
            log(f'Error while {ctx.author.id} was timeouting {member.id} for {length}: {e}', level=ERROR)
            view = to_view('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.', ERROR_C)
            await ctx.reply(view=view, ephemeral=True)
            return

        # sending message
        if reason == None:
            view = to_view([
                '### ü§ê –¢–∞–π–º–∞—É—Ç', SEP(),
                f'{member.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–º—å—é—á–µ–Ω –Ω–∞ **{unit_length} {unit_name}**.'
            ], DEFAULT_C)

        else:
            view = to_view([
                '### ü§ê –¢–∞–π–º–∞—É—Ç', SEP(),
                f'{member.name} —É—Å–ø–µ—à–Ω–æ –∑–∞–º—å—é—á–µ–Ω –Ω–∞ **{unit_length} {unit_name}** '\
                    f'–ø–æ –ø—Ä–∏—á–∏–Ω–µ **{reason}**.'
            ], DEFAULT_C)

        await ctx.reply(view=view)


    # unmute command
    @bot.hybrid_command(
        name='unmute',
        aliases=['—Ä–∞–∑–º—É—Ç','–∞–Ω–º—É—Ç'],
        description='–†–∞–∑–º—É—á–∏–≤–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    @discord.app_commands.describe(
        member='–£—á–∞—Å—Ç–Ω–∏–∫, –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ —Ä–∞–∑–º—É—Ç–∏—Ç—å'
    )
    async def slash_unmute(
        ctx: commands.Context, member:discord.Member
    ):
        '''
        Unmutes the specified user.
        '''
        # checking permissions
        if not ctx.permissions.moderate_members:
            await ctx.reply(view=c_to_view(MISSING_PERMS_EMBED))
            return

        # checking if the user is muted or not
        if member.timed_out_until == None:
            view = to_view('–≠—Ç–æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫ –∏ —Ç–∞–∫ –Ω–µ –≤ –º—É—Ç–µ.', ERROR_C)
            await ctx.reply(view=view, ephemeral=True)
            return

        # unmuting
        try:
            await member.timeout(None)
            log(f'{ctx.author.id} unmuted user {member.id}')

        except Exception as e:
            log(f'Error while {ctx.author.id} was unmuting {member.id}: {e}', level=ERROR)
            view = to_view('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–º—É—Ç–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.', ERROR_C)
            await ctx.reply(view=view, ephemeral=True)
            return
           
        view = to_view([
            '### ü§ê –†–∞–∑–º—É—Ç', SEP(),
            f'–í—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–º—É—Ç–∏–ª–∏ {member.name}!'
        ], DEFAULT_C)
        await ctx.reply(view=view)
