from discord.ext import commands
import discord
from builder import *
from config import *
import utils
import api

async def setup(bot: commands.Bot):
    # command
    @bot.hybrid_command(
        name='faq',
        aliases=['—á–∞–≤–æ',"–≥–∞–π–¥",'guide','help','—Ö–µ–ª–ø','–ø–æ–º–æ—â—å','fuckyou','—Ñ–∞–∫—é','—Ñ–∞–∫—å—é','fucku'],
        description='–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã.'
    )
    @api.check_guild
    @discord.app_commands.guild_only()
    @discord.app_commands.guild_install()
    @discord.app_commands.describe(
        page="–ò–º—è –∏–ª–∏ —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –∂–µ–ª–∞–µ–º–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã / –≤–æ–ø—Ä–æ—Å–∞."
    )
    async def faq(ctx: commands.Context, *, page: str = None):
        # page detected
        if page:
            for i in bot.mg.data.get('faq', []):
                if any([item.lower() == page.lower() for item in i['alt']]):
                    view = to_view(utils.get_faq_view_items(i))
                    await ctx.reply(view=view)
                    return
        
        # no page
        options = []

        for c, i in enumerate(bot.mg.data.get('faq', [])):
            options.append(discord.SelectOption(
                label=i['name'], value=str(c), emoji=i['emoji']
            ))

        view = to_view([
            '### üìö –ü–æ–º–æ—â—å', SEP(),
            '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ FAQ!', '–ó–¥–µ—Å—å –º–æ–∂–Ω–æ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –±–æ—Ç–µ.', SEP(),
            ui.Select(
                custom_id='faq',
                options=options,
                placeholder='–í—ã–±–µ—Ä–∏ —Å—Ç—Ä–∞–Ω–∏—á–∫—É...'
            )
        ])
        await ctx.reply(view=view)

    # handling components
    @bot.listen()
    async def on_interaction(interaction:discord.Interaction):
        if interaction.type == discord.InteractionType.component and interaction.data['custom_id'] == 'faq':
            index = int(interaction.data['values'][0])
            data = bot.mg.data.get('faq', [])[index]
            
            view = to_view(utils.get_faq_view_items(data))
            await interaction.response.send_message(view=view, ephemeral=True)